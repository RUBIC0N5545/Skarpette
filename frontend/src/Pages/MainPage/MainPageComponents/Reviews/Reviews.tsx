import React, { useState, useEffect } from "react";
import ReviewModal from "./ReviewModal";
import "./Reviews.scss";

import star_icon_active from "../../../../assets/img/icons/star.svg";
import verify_icon from "../../../../assets/img/icons/verify-filled.svg";

interface Testimonial {
  id: number;
  name: string;
  rating: number;
  comment: string;
}

const testimonialsData: Testimonial[] = [
  {
    id: 1,
    name: "–ê–ª—ñ–Ω–∞ –ú.",
    rating: 5,
    comment:
      "–ù–µ–π–º–æ–≤—ñ—Ä–Ω–æ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∞ —è–∫—ñ—Å—Ç—é. –ü–∞–∫—É–≤–∞–Ω–Ω—è —á—É–¥–æ–≤–µ. –ñ–æ–¥–Ω–æ–≥–æ –∑–∞—É–≤–∞–∂–µ–Ω–Ω—è –Ω–µ–º–∞—î. –ü–µ—Ä–µ–≤–µ—Ä—à–∏–ª–∏ –º–æ—ó —Å–ø–æ–¥—ñ–≤–∞–Ω–Ω—è. –ö—É–ø—É–≤–∞—Ç–∏–º—É —â–µ.",
  },
  {
    id: 2,
    name: "–í—ñ—Ä–∞ –°.",
    rating: 5,
    comment:
      "–ü—Ä–∏–π—à–ª–æ –≤—Å–µ –≤—á–∞—Å–Ω–æ, —è–∫—ñ—Å—Ç—é –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∞. –ë—É–¥—É —Ä–∞–¥–∏—Ç–∏ –¥—Ä—É–∑—è–º‚ò∫Ô∏è",
  },
  {
    id: 3,
    name: "–û–ª—è –ö.",
    rating: 5,
    comment:
      "–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≥–∞—Ä–Ω—ñ —ñ —è–∫—ñ—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏, –≤ —Ä—É—Ü—ñ –Ω–∞–≤—ñ—Ç—å –∫—Ä—É—Ç–æ —Ç–∞–∫ –≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è –Ω–∞ –¥–æ—Ç–∏–∫.",
  },
  {
    id: 4,
    name: "–ú–∞—Ä—ñ–∞–Ω–Ω–∞ –¢.",
    rating: 5,
    comment:
      "–¶–µ –ø—Ä–æ—Å—Ç–æ –í–ê–£! –í–ø–µ—Ä—à–µ –±–∞—á—É —Ç–∞–∫—ñ —è–∫—ñ—Å–Ω—ñ —à–∫–∞—Ä–ø–µ—Ç–∫–∏! –ù–æ—à—É —ó—Ö –∑ –Ω–µ–∞–±–∏—è–∫–∏–º –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è–º –≤–∂–µ –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–æ–∫—ñ–≤, —ñ —â–µ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –±—É–ª–æ –ø—Ä–µ—Ç–µ–Ω–∑—ñ–π.",
  },
  {
    id: 5,
    name: "–Ü–≤–∞–Ω–∫–∞ –ü.",
    rating: 5,
    comment:
      '–ó–∞–º–æ–≤–ª—è–ª–∞ –Ω–∞ –∑–∏–º—É –∂—ñ–Ω–æ—á—ñ —à–∫–∞—Ä–ø–µ—Ç–∫–∏. –î—É–∂–µ —Å–ø–æ–¥–æ–±–∞–ª–∏—Å—å. –î—è–∫—É—é!',
  },
  {
    id: 6,
    name: "–ê–Ω–¥—Ä—ñ–π –ê.",
    rating: 4,
    comment:
      "–ü–µ—Ä—à–∏–π —Ä–∞–∑ –∑–∞–º–æ–≤–ª—è–≤ —á–µ—Ä–µ–∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç. –ü–æ—Ä–∞–¥–∏–ª–∏ —â–æ –∫—Ä–∞—â–µ –≤–∑—è—Ç–∏. –í—Å–µ –û–ö.",
  },
  {
    id: 7,
    name: "–°–µ—Ä–≥—ñ–π –ü.",
    rating: 5,
    comment:
      "–Ø–∫—ñ—Å—Ç—å –≤—ñ–¥–º—ñ–Ω–Ω–∞. –ë—É–¥—É –∑–∞–º–æ–≤–ª—è—Ç–∏ —â–µ!‚ù§Ô∏è",
  },
  {
    id: 8,
    name: "–í–∞–ª—è –§.",
    rating: 4,
    comment:
      "–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –û—Ç—Ä–∏–º–∞–ª–∞ —à–∫–∞—Ä–ø–µ—Ç–æ—á–∫–∏ –¥—É–∂–µ —à–≤–∏–¥–∫–æ. –¶—ñ–Ω–∞-—è–∫—ñ—Å—Ç—å. –ó–∞–≥–∞–ª–æ–º –ø–æ–¥–æ–±–∞—é—Ç—å—Å—è.",
  },
  {
    id: 9,
    name: "–ü–µ—Ç—è –ö.",
    rating: 5,
    comment:
      "–í—Å–µ –û–ö! –†–µ–∫–æ–º–µ–Ω–¥—É—é!",
  },
  {
    id: 10,
    name: "–°–≤—ñ—Ç–ª–∞–Ω–∞ –¶.",
    rating: 5,
    comment:
      "–ó–∞–º–æ–≤–∏–ª–∞ –¥—Ä—É–≥–∏–π —Ä–∞–∑. –í—Å–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å.",
  },
  {
    id: 11,
    name: "–í—ñ–∫—É—Å—è –ì.",
    rating: 5,
    comment:
      "–í—á–æ—Ä–∞ –∑–∞–º–æ–≤–∏–ª–∞ —ñ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∞. –ú–µ–Ω—ñ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è!‚ù§Ô∏è",
  },
  {
    id: 12,
    name: "–ê–Ω–∞—Å—Ç–∞—Å—ñ—è –ì.",
    rating: 4,
    comment:
      "–ö—É–ø–ª—è–ª–∞ —Å–æ–±—ñ —ñ —á–æ–ª–æ–≤—ñ–∫–æ–≤—ñ. –ó–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—ñ –æ–±–æ—î.",
  },
  {
    id: 13,
    name: "–ù–µ–ª—è –ö.",
    rating: 3,
    comment:
      "–¶—ñ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —è–∫–æ—Å—Ç—ñ!",
  },
  {
    id: 14,
    name: "–û–ª—å–≥–∞ –ó.",
    rating: 5,
    comment:
      "–ó–∞–º–æ–≤–∏–ª–∞ –Ω–∞ –∑–∏–º—É —Å–æ–±—ñ —ñ –¥—ñ—Ç—è–º. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–≤—ñ—Ç–Ω–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É—é!",
  },
  {
    id: 15,
    name: "–¢–∞–Ω—è –ö.",
    rating: 5,
    comment:
      "–®–∫–∞—Ä–ø–µ—Ç–∫–∏ —á—É–¥–æ–≤—ñ. –ë—É–¥—É –∑–∞–º–æ–≤–ª—è—Ç–∏ —ñ –Ω–∞–¥–∞–ª—ñ!",
  },
  {
    id: 16,
    name: "–ê–Ω—è –û.",
    rating: 5,
    comment:
      "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–ª–∞. –î—É–∂–µ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∞. –ë—É–¥—É –∑–∞–º–æ–≤–ª—è—Ç–∏ –¥–∞–ª—ñ!üëç",
  },

];

const Reviews: React.FC = () => {
  const [currentPage, setCurrentPage] = useState(1);
  const [screenType, setScreenType] = useState(getScreenType());
  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);

  useEffect(() => {
    const handleResize = () => setScreenType(getScreenType());
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  function getScreenType() {
    if (window.innerWidth <= 767) return "mobile";
    if (window.innerWidth <= 1280) return "tablet";
    return "desktop";
  }

  const itemsPerPage =
    screenType === "mobile" ? 1 : screenType === "tablet" ? 2 : 3;
  const totalPages = Math.ceil(testimonialsData.length / itemsPerPage);

  const goToPrevious = () =>
    setCurrentPage((prev) => (prev > 1 ? prev - 1 : totalPages));
  const goToNext = () =>
    setCurrentPage((prev) => (prev < totalPages ? prev + 1 : 1));

  const visibleReviews = testimonialsData.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const renderStars = (rating: number) => (
    <div className="reviews__stars">
      {[...Array(5)].map((_, i) => (
        <span key={i} className="reviews__stars-item">
          <img
            src={star_icon_active}
            alt="star_icon_active"
            style={{ opacity: i < rating ? 1 : 0.3 }}
          />
        </span>
      ))}
    </div>
  );

  return (
    <div className="reviews">
      <div className="reviews__container">
        <div className="reviews__top-bar">
          <p className="reviews__title">–©–æ –ø—Ä–æ –Ω–∞—Å –∫–∞–∂—É—Ç—å –∫–ª—ñ—î–Ω—Ç–∏?</p>
          <button
            className="reviews__feedback-button"
            onClick={() => setIsReviewModalOpen(true)}
          >
            –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫
          </button>
        </div>

        <div className={`reviews__slider reviews__slider--${screenType}`}>
          {visibleReviews.map((review) => (
            <div key={review.id} className="reviews__item">
              {renderStars(review.rating)}
              <h3 className="reviews__item-name">
                {review.name}
                <span>
                  <img src={verify_icon} alt="verify icon" />
                </span>
              </h3>
              <p className="reviews__item-comment">{review.comment}</p>
            </div>
          ))}
        </div>

        <div className="reviews__controls">
          <button className="reviews__controls-button" onClick={goToPrevious}>
            <svg
              width="24"
              height="24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M15 6L9 12L15 18" stroke="black" />
            </svg>
          </button>

          <span className="reviews__controls-page">
            <span className="reviews__controls-page-current-page">
              {currentPage}
            </span>
            <span className="reviews__controls-page-total-page">
              / {totalPages}
            </span>
          </span>

          <button className="reviews__controls-button" onClick={goToNext}>
            <svg
              width="24"
              height="24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M9 6L15 12L9 18" stroke="black" />
            </svg>
          </button>
        </div>

        <ReviewModal
          isOpen={isReviewModalOpen}
          onClose={() => setIsReviewModalOpen(false)}
        />
      </div>
    </div>
  );
};

export default Reviews;
